"""
Django settings for domino project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import json
import sys
import dj_database_url
from dotenv import load_dotenv
from datetime import timedelta
from firebase_admin import credentials
from firebase_admin import initialize_app
# Cargar variables del archivo .env
load_dotenv('.env', override=True)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')

# SECURITY WARNING: don't run with debug turned on in production!
PRODUCTION = os.getenv("PRODUCTION", "False") == "True"

DEBUG = not PRODUCTION  #'RENDER' not in os.environ
DEVELOPMENT = not PRODUCTION

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {       
        'ENGINE': os.getenv("DB_ENGINE"),       # El tipo de DB que se va usar  
        'NAME': os.getenv("DB_NAME"),           # Nombre de tu DB  
        'USER': os.getenv("DB_USER"),           # Tu usuario para la DB  
        'PASSWORD': os.getenv("DB_PASSWORD"),   # Tu contraseña para la DB  
        'HOST': os.getenv("DB_HOST"),           # La dirección de tu DB  
        'PORT': os.getenv("DB_PORT"),           # El puerto de tu DB   
        'TEST': {
          'NAME': 'ahmedlp9$test_default',      # esto es del servidor anterior, esta en desuso
        }
    },
}

if PRODUCTION:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  # Tu dirección de Gmail
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # Tu contraseña o contraseña de aplicación
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')  # ¡Importante! Evita solo el email.
    SERVER_EMAIL = os.getenv('SERVER_EMAIL')  # Para errores

    PRODUCTION_DATABASE_SETTINGS = dj_database_url.config(ssl_require=True)
    DATABASES["default"] = PRODUCTION_DATABASE_SETTINGS

    CSRF_TRUSTED_ORIGINS = ['https://domino-club-fdc25b05dc8f.herokuapp.com']

    GS_DEFAULT_ACL = 'publicRead'  # Esto hará que los archivos sean públicos

    DEFAULT_FILE_STORAGE   = "dominoapp.connectors.google_verifier.GoogleDriveStorage"

    # Configuración para WebSockets seguros
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
else:
    # This will display email in Console.
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


ALLOWED_HOSTS = ["*","ahmedlp9.pythonanywhere.com", "dominoclubtest.pythonanywhere.com", "http://localhost:8081"]

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition
INSTALLED_APPS = [
    'jazzmin',
    'dominoapp.apps.DominoappConfig',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'drf_spectacular',
    'storages',
    'fcm_django',
    'django_user_agents',
    'corsheaders'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8081",
    "https://domino-club-fdc25b05dc8f.herokuapp.com",
    # Add more allowed origins as needed
]

ROOT_URLCONF = 'domino.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'domino.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Debe estar presente
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema'
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend"
]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=36500),  # Ajusta según necesites
    'REFRESH_TOKEN_LIFETIME': timedelta(days=36500),
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'DOMINO_CLUB',
    'DESCRIPTION': 'Domino Club project API Documents',
    'VERSION': '0.0.1',
    'SCHEMA_PATH_PREFIX': '/v2/api/*',   #To separate routes in urls so they don't mix together.
    'SERVE_PERMISSIONS': ['rest_framework.permissions.IsAdminUser'],  # Must login first
    'DISABLE_ERRORS_AND_WARNINGS': True,
    'SERVE_AUTHENTICATION': [
                    'rest_framework.authentication.SessionAuthentication',
                ]
}


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
#if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        "discord_error": {
            "class": "dominoapp.utils.api_logger.LogHandlerDiscord",
            'include_html': False,
            'level': 'ERROR'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['discord_error'],
            'level': 'ERROR',
            'propagate': False,
        }
    },
}

SITE_ID = 1

CELERY_BROKER_URL = os.getenv('REDISCLOUD_URL', 'redis://localhost:6379/0')
CELERY_BEAT_SCHEDULE = {
    'ejecutar_movimiento_automatico': {
        'task': 'dominoapp.tasks.automatic_move',
        'schedule': 7.0,
    },
}

try:
    firebase_config = os.environ.get('FCM_SERVER_KEY')
    if firebase_config is not None:
        firebase_config = json.loads(firebase_config)
        cred = credentials.Certificate(firebase_config)
        FIREBASE_APP = initialize_app(cred)
    FCM_DJANGO_SETTINGS = {
        # an instance of firebase_admin.App to be used as default for all fcm-django requests
        # default: None (the default Firebase app)
        "DEFAULT_FIREBASE_APP": FIREBASE_APP,
        # default: _('FCM Django')
        # "APP_VERBOSE_NAME": "[string for AppConfig's verbose_name]",
        # true if you want to have only one active device per registered user at a time
        # default: False
        "ONE_DEVICE_PER_USER": False,
        # devices to which notifications cannot be sent,
        # are deleted upon receiving error response from FCM
        # default: False
        "DELETE_INACTIVE_DEVICES": False
    }
except:
    pass


# Configuración de Channel Layers
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [
                {
                    'address':CELERY_BROKER_URL
                }
            ],
            'prefix': 'domino_club'  # Prefijo para las claves Redis
        },
    },
}